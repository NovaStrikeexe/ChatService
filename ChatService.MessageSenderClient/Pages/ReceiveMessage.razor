@page "/receive-message"
@using System.Net.WebSockets
@using System.Text
@inject NavigationManager Navigation
@implements IAsyncDisposable

<h3>Receive Messages</h3>

@if (messages.Any())
{
    <ul>
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}
else
{
    <p>No messages received yet.</p>
}

@code {
    private ClientWebSocket _webSocket;
    private List<string> messages = new();
    private CancellationTokenSource _cancellationTokenSource = new();
    private Task _receiveTask;

    protected override async Task OnInitializedAsync()
    {
        _webSocket = new ClientWebSocket();
        var uri = new Uri(Navigation.ToAbsoluteUri("ws://localhost:5150/ws").ToString());

        try
        {
            await _webSocket.ConnectAsync(uri, _cancellationTokenSource.Token);
            _receiveTask = ReceiveMessagesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to WebSocket: {ex.Message}");
        }
    }

    private async Task ReceiveMessagesAsync()
    {
        var buffer = new byte[1024];

        while (!_cancellationTokenSource.Token.IsCancellationRequested)
        {
            try
            {
                var result = await _webSocket.ReceiveAsync(new ArraySegment<byte>(buffer), _cancellationTokenSource.Token);
                switch (result.MessageType)
                {
                    case WebSocketMessageType.Text:
                    {
                        var message = Encoding.UTF8.GetString(buffer, 0, result.Count);
                        messages.Add(message);
                        StateHasChanged();
                        break;
                    }
                    case WebSocketMessageType.Close:
                        await _webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Closed by the WebSocket server", _cancellationTokenSource.Token);
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error receiving WebSocket message: {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        _cancellationTokenSource.Cancel();
        if (_webSocket != null)
        {
            _webSocket.Dispose();
        }
        await _receiveTask;
    }
}
